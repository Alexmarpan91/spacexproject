
#####################################################################################################################
#####################################################################################################################
# Import required libraries
import pandas as pd
import dash
from dash import html
from dash import dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                dcc.Dropdown(id='site-dropdown',
                options=[
                    {'label': 'All Sites', 'value': 'ALL'},
                    {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
                    {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
                    {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                    {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},
                ],
                value='ALL',
                placeholder="place holder here",
                searchable=True
                ),
                html.Br(),
# Div for output display
                
                html.Div(id='output-container', 
                         className='chart-item', 
                         style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                
                                
                                
                                
                                
                             
                                html.Br(),
 html.H4("Select  range of  Payload (kg)"),
    dcc.RangeSlider(
        id='payload-slider',
        min=0,
        max=10000,
        step=1000,
        value=[min_payload, max_payload],  # valor inicial
        #marks={i: str(i) for i in range(0, 101, 20)},  # marcas del eje
        tooltip={"placement": "bottom", "always_visible": True}
    ),
    html.Div(id='salida-slider'),
                                #html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...)

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                
                html.Br(),              #html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                
                html.H4(id='output-container2', 
                         className='chart-item', 
                         style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40})
                         
                              
                              
                              
                              
                              
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output




# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output


# Run the app
@app.callback(
    Output('output-container', 'children'),
    Input('site-dropdown', 'value')
)
def update_output (entered_site):
    
    if entered_site == 'ALL':
        filtered_df = spacex_df.groupby('Launch Site')['class'].sum().reset_index()
        fig = px.pie(filtered_df, values='class', names='Launch Site',
                     title="Total Succesfull SpaceX lauching by site")
        
        return   dcc.Graph(figure=fig)
    elif entered_site == 'CCAFS LC-40':
        filtered_df = spacex_df[spacex_df['Launch Site'] == 'CCAFS LC-40']
        filtered_df=filtered_df.groupby('class')['Launch Site'].count().reset_index()
        fig = px.pie(filtered_df, values='Launch Site', names='class',
                     title="Total Succesfull SpaceX lauching by site")
        return   dcc.Graph(figure=fig)

    elif entered_site == 'CCAFS SLC-40':
        filtered_df = spacex_df[spacex_df['Launch Site'] == 'CCAFS SLC-40']
        filtered_df=filtered_df.groupby('class')['Launch Site'].count().reset_index()
        fig = px.pie(filtered_df, values='Launch Site', names='class',
                     title="Total Succesfull SpaceX lauching by site")
        return   dcc.Graph(figure=fig)

    elif entered_site == 'VAFB SLC-4E':
        filtered_df = spacex_df[spacex_df['Launch Site'] == 'VAFB SLC-4E']
        filtered_df=filtered_df.groupby('class')['Launch Site'].count().reset_index()
        fig = px.pie(filtered_df, values='Launch Site', names='class',
                     title="Total Succesfull SpaceX lauching by site")
        return   dcc.Graph(figure=fig)

    elif entered_site == 'VAFB SLC-4E':
        filtered_df = spacex_df[spacex_df['Launch Site'] == 'VAFB SLC-4E']
        filtered_df=filtered_df.groupby('class')['Launch Site'].count().reset_index()
        fig = px.pie(filtered_df, values='Launch Site', names='class',
                     title="Total Succesfull SpaceX lauching by site")
        return   dcc.Graph(figure=fig)

    elif entered_site == 'KSC LC-39A':
        filtered_df = spacex_df[spacex_df['Launch Site'] == 'KSC LC-39A']
        filtered_df=filtered_df.groupby('class')['Launch Site'].count().reset_index()
        fig = px.pie(filtered_df, values='Launch Site', names='class',
                     title="Total Succesfull SpaceX lauching by site")
        return   dcc.Graph(figure=fig)
    else:
         return "Please select a valid report type."
@app.callback(
    Output('salida-slider', 'children'),
    Input('payload-slider', 'value')
)
def actualizar_salida(rango):
    return f"Rango seleccionado: {rango[0]} - {rango[1]}"


@app.callback(
    Output('output-container2', 'children'),
    Input('payload-slider', 'value')
)
def comosea2(rango):

    scater_df = spacex_df[(spacex_df['Payload Mass (kg)'] >= rango[0]) & (spacex_df['Payload Mass (kg)'] <= rango[1])]
        
    figur = px.scatter(scater_df, x='Payload Mass (kg)', y='class', color="Booster Version Category",title="Correlation between Pyaload and Success for all Sites")

    return dcc.Graph(figure=figur)



if __name__ == '__main__':
    app.run(debug=True)